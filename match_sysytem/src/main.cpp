// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include <cstdint>
#include <iostream>
#include <thread> 
#include <mutex>
#include <condition_variable>  // 实现更灵活的锁
#include <queue>
#include <vector>

#include "match_server/Match.h"
#include "match_server/match_types.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match_service;

struct Task {
    User user;
    std::string type; // 添加用户和删除用户两种
};

// 封装成消息队列
struct MessagQueue {
    std::queue<Task> q;
    std::mutex m;
    std::condition_variable cv;
} message_queue;

// 用户匹配池
class Pool {
public:
    void add(User user) {
        users.push_back(user);
    }

    void remove(User user) {
        // 查找并删除
        for(uint32_t i = 0; i < users.size(); i ++) {  // 使用unint32_t消除warning，写工程最好零warning
            if(users[i].id == user.id) {
                // 删除某一位置上的元素
                users.erase(users.begin() + i); 
            }
        }
    }

    void save_result(int a, int b) {
        std::cout << "Match Result: " << a << " " << b << std::endl;

    }

    void match() {
        while(users.size() > 1) {
            auto a = users[0];
            auto b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());

            save_result(a.id, b.id);
        }
    }

private:
    std::vector<User> users;
} pool;  // 定义变量名

// 定义了相关的接口，但是没有具体的业务逻辑，业务逻辑需要实现
class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");
            
            // 访问互斥资源上锁
            std::unique_lock<std::mutex> lck(message_queue.m);  // RAII原则，并且比lock_guard更灵活
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all();  

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            std::unique_lock<std::mutex> lck(message_queue.m);
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all(); 

            return 0;
        }

};

/**
 * 消费者线程任务，作用是不断执行增删任务并持续匹配
 */
void comsume_task() {
    while(true) {
        std::unique_lock<std::mutex> lck(message_queue.m);
        if(message_queue.q.empty()) {
            // 避免忙等待
            // 条件变量实现PV操作
            message_queue.cv.wait(lck);

        } else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            // 真正执行逻辑任务前解锁，防止持有锁的时间过长
            lck.unlock();

            // 执行任务
            if(task.type == "add") {
                pool.add(task.user);
            } else if(task.type == "remove") {
                pool.remove(task.user);
            } else {
                std::cout << "task type undefined" << std::endl;
            }

            // 持续匹配，因为匹配任务和增删用户的池子管理任务关联密切，所以放到同一个函数中
            // 也即每来一个新任务才检查一次匹配
            pool.match();
        }
    }
}

int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

    std::cout << "start match server" << std::endl;

    // 创建工作线程（增删用户池，持续匹配）
    std::thread match_thread(comsume_task);
    server.serve();
    
    return 0;
}

