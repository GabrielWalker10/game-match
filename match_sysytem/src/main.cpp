// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include <algorithm>
#include <cstdint>
#include <cstdlib>
#include <iostream>
#include <thread> 
#include <mutex>
#include <condition_variable>  // 实现更灵活的锁
#include <queue>
#include <vector>
#include <unistd.h>

#include "match_server/Match.h"
#include "match_server/match_types.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>


// 加上作为数据保存客户端的头文件
#include "save_client/Save.h"
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>

// 添加多线程头文件
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/TToString.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

// 注意添加命名空间
using namespace ::match_service;
using namespace ::save_service;  

struct Task {
    User user;
    std::string type; // 添加用户和删除用户两种
};

// 封装成消息队列
struct MessagQueue {
    std::queue<Task> q;
    std::mutex m;
    std::condition_variable cv;
} message_queue;

// 用户匹配池
class Pool {
    public:
        void add(User user) {
            users.push_back(user);
            wt.push_back(0); // 从零秒开始记录
        }

        void remove(User user) {
            // 查找并删除
            for(uint32_t i = 0; i < users.size(); i ++) {  // 使用unint32_t消除warning，写工程最好零warning
                if(users[i].id == user.id) {
                    // 删除某一位置上的元素
                    users.erase(users.begin() + i); 
                    wt.erase(wt.begin() + i);
                }
            }
        }

        void save_result(int a, int b) {
            std::cout << "Match Result: " << a << " " << b << std::endl;

            // 注意修改为对应的IP地址和端口
            std::shared_ptr<TTransport> socket(new TSocket("localhost", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                // 打开连接
                transport->open();
                // std::cout << "open successed" << std::endl;

                // 下一步在本地实现存储数据服务端
                // TODO

                int res = client.save_data("username", "password", a, b);
                if(res)
                    std::cout << "save successed" << std::endl;
                else
                    std::cout << "save failed" << std::endl;

                // 关闭连接
                transport->close();
            } catch (TException& tx) {
                std::cout << "ERROR: " << tx.what() << '\n';
            }
        }
        
        bool check_match(uint32_t i, uint32_t j) {
            // 应该同时在互相的区间内才能匹配
            auto a = users[i], b = users[j];
            int dt = std::abs(a.score - b.score);
            // std::cout << "dt: " << dt << std::endl;

            int a_max_dt = wt[i] * 50;  // 前后50可匹配
            int b_max_dt = wt[j] * 50;  // 前后50可匹配
            
            // 注意需要单独满足，因此每次步幅为50
            return dt <= a_max_dt && dt <= b_max_dt;
        }

        void match() {
            // 匹配前等待轮数加一
            for(uint32_t i = 0; i < wt.size(); i ++) {
                wt[i] ++;
            }

            while(users.size() > 1) {  
                bool flag = true;
                for(uint32_t i = 0; i < users.size(); i ++) {
                    for(uint32_t j = i + 1; j < users.size(); j++) {
                        auto a = users[i], b = users[j];
                        if(check_match(i, j)) {
                            users.erase(users.begin() + j); // 先消除后面个
                            users.erase(users.begin() + i);

                            // 成员时间也应该删除
                            wt.erase(wt.begin() + j);
                            wt.erase(wt.begin() + i);
                            
                            flag = false;
                            save_result(a.id, b.id);
                            // 直接break，因为涉及删除位置乱了，需要重新匹配
                            break;
                        }
                    }
                }

                // 将池子中符号要求的匹配完，且防止死循环
                if(flag) {
                    // std::cout << "now all users are matched which are qualified" << std::endl;
                    break;
                }
            }
        }

    private:
        std::vector<User> users;
        std::vector<int> wt;   // 当前玩家等待的轮数（对应秒数）
} pool;  // 定义变量名

// 定义了相关的接口，但是没有具体的业务逻辑，业务逻辑需要实现
class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            // 访问互斥资源上锁
            std::unique_lock<std::mutex> lck(message_queue.m);  // RAII原则，并且比lock_guard更灵活
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all();  

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            std::unique_lock<std::mutex> lck(message_queue.m);
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all(); 

            return 0;
        }

};

// 定义线程池
class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            
            // std::cout << "Incoming connection\n";
            // std::cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
            // std::cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
            // std::cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
            // std::cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";

            return new MatchHandler;
        }

        // 注意修改为MatchIf
        void releaseHandler(MatchIf* handler) override {
            delete handler;
        }
};


/**
 * 消费者线程任务，作用是不断执行增删任务并持续匹配
 */
void comsume_task() {
    while(true) {
        std::unique_lock<std::mutex> lck(message_queue.m);

        // 消息队列不为空时优先处理消息，因为池子变化更可能匹配
        if(message_queue.q.empty()) {

            // 解锁
            lck.unlock();
            // 只在这里匹配，基本上保证固定每秒匹配一次
            pool.match();
            sleep(1);    // 匹配不阻塞，每隔约1s匹配一次

        } else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            // 真正执行逻辑任务前解锁，防止持有锁的时间过长
            lck.unlock();

            // 执行任务
            if(task.type == "add") {
                pool.add(task.user);
            } else if(task.type == "remove") {
                pool.remove(task.user);
            } else {
                std::cout << "task type undefined" << std::endl;
            }
        }
    }
}

int main(int argc, char **argv) {
    // 多线程服务器的模式，每次调用一次函数就创建一个线程
    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());

    std::cout << "start match server" << std::endl;

    // 创建工作线程（增删用户池，持续匹配）
    std::thread match_thread(comsume_task);
    server.serve();

    return 0;
}

